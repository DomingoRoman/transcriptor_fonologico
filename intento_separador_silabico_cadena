# separar por cada grupo fónico mayor (a)
# cada grupo a separarlo en grupos menores (b)
#
# para cada grupo fónico b
#     medir longitud
#     comando for desde inicio hasta el final...
#         si los dos 1os caracteres de la cadena son "vv"
#         segmentar "v" y todo lo demás
#
# Hay que eliminar la última pausa

# s_e_estructura_silabica_cadena = "cvcvcvcv ‖ cvcvcv | cvcvcvcv"

# Se obtienen los grupos fónicos mayores, es decir, separados por pausas largas.

s_e_estructura_silabica_cadena = "v ‖ v |v |v |v ‖  v| v | vv"

grupos_fonicos_a = s_e_estructura_silabica_cadena.split("‖")

n_g_fonicos_largos = len(grupos_fonicos_a)

#print(grupos_fonicos_a)

#print(n_g_fonicos_largos)

for i in range(n_g_fonicos_largos):
    grupos_fonicos_b = grupos_fonicos_a[i].split("|")
#    print(grupos_fonicos_b)
    for grupo_menor in grupos_fonicos_b:
        grupo_menor = grupo_menor.replace(" ","")
#        print(grupo_menor)
        largo = len(grupo_menor)
        n_sil_grupo_menor = grupo_menor.count("v")
        print(largo," ", n_sil_grupo_menor)
        
        if largo == 1:
            s1 = "v"
            print(s1)
        elif largo == 2:
            caracter1 = grupo_menor[0]
            caracter2 = grupo_menor[1]
            if caracter1 == "v" and caracter2 == "v":
                s1 = "v"
                s2 = "v"
                print(s1,s2)

# porcion2 = estructura_silabica_cadena[1:largo]
